---
import Layout from "../layouts/Layout.astro";
---

<Layout>
  <div class="min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      
      <div class="text-center mb-8">
        <h1 class="page-title">Analyse des Diamants</h1>
        <p class="text-xl text-gray-600 mb-2">
          D√©couvrez la relation entre prix et poids des diamants selon leur qualit√©
        </p>
        <p class="text-sm text-gray-500">
          Graphique : Carat vs Prix ($) avec r√©gression lin√©aire
        </p>
      </div>
      <div class="card mb-8">
        
        <div class="card-header">
          <h3 class="text-lg font-semibold text-gray-900 mb-4">üîç Filtres de Qualit√©</h3>
          <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
            
            <div class="filter-group">
              <label for="cut" class="filter-label">Qualit√© de taille</label>
              <select name="cut" id="cut" class="filter-select">
                <option value="">Toutes les tailles</option>
                <option value="Fair">Fair</option>
                <option value="Good">Good</option>
                <option value="Very Good">Very Good</option>
                <option value="Premium">Premium</option>
                <option value="Ideal">Ideal</option>
              </select>
            </div>

            <div class="filter-group">
              <label for="color" class="filter-label">Couleur</label>
              <select name="color" id="color" class="filter-select">
                <option value="">Toutes les couleurs</option>
                <option value="D">D (Incolore)</option>
                <option value="E">E (Incolore)</option>
                <option value="F">F (Incolore)</option>
                <option value="G">G (Presque incolore)</option>
                <option value="H">H (Presque incolore)</option>
                <option value="I">I (Faiblement teint√©)</option>
                <option value="J">J (Faiblement teint√©)</option>
              </select>
            </div>

            <div class="filter-group">
              <label for="clarity" class="filter-label">Puret√©</label>
              <select name="clarity" id="clarity" class="filter-select">
                <option value="">Toutes les puret√©s</option>
                <option value="I1">I1 (Inclusions visibles)</option>
                <option value="SI2">SI2 (Petites inclusions)</option>
                <option value="SI1">SI1 (Petites inclusions)</option>
                <option value="VS2">VS2 (Tr√®s petites inclusions)</option>
                <option value="VS1">VS1 (Tr√®s petites inclusions)</option>
                <option value="VVS2">VVS2 (Inclusions tr√®s difficilement visibles)</option>
                <option value="VVS1">VVS1 (Inclusions tr√®s difficilement visibles)</option>
                <option value="IF">IF (Sans d√©faut interne)</option>
              </select>
            </div>
          </div>
        </div>

        <div class="card-content">
          <div id="chart-info" class="text-center mb-4">
            <span class="text-sm text-gray-500 loading">Chargement des donn√©es...</span>
          </div>
          <div id="myplot" class="chart-container">
            <div class="chart-loading">
              <div class="loading-spinner"></div>
              <p>G√©n√©ration du graphique...</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

<script>
  import * as Plot from "@observablehq/plot";
  import diamonds from "../assets/diamonds.json";

  const selectCut = document.querySelector("#cut") as HTMLSelectElement;
  const selectColor = document.querySelector("#color") as HTMLSelectElement;
  const selectClarity = document.querySelector("#clarity") as HTMLSelectElement;
  const chartInfo = document.querySelector("#chart-info") as HTMLElement;

  interface Filters {
    cut: string;
    color: string;
    clarity: string;
  }

  function getFilters(): Filters {
    return {
      cut: selectCut?.value || "",
      color: selectColor?.value || "",
      clarity: selectClarity?.value || ""
    };
  }

  function filterDiamonds(diamonds: any[], filters: Filters): any[] {
    return diamonds.filter((data: any) => {
      const matchCut = !filters.cut || data.cut === filters.cut;
      const matchColor = !filters.color || data.color === filters.color;
      const matchClarity = !filters.clarity || data.clarity === filters.clarity;
      
      return matchCut && matchColor && matchClarity;
    });
  }

  function updateChartInfo(filteredData: any[]) {
    const total = diamonds.length;
    const filtered = filteredData.length;
    const percentage = Math.round((filtered / total) * 100);
    
    const avgPrice = Math.round(filteredData.reduce((sum, d) => sum + d.price, 0) / filtered);
    const avgCarat = (filteredData.reduce((sum, d) => sum + d.carat, 0) / filtered).toFixed(2);
    
    if (chartInfo) {
      chartInfo.innerHTML = `
        <div class="flex flex-col sm:flex-row justify-center items-center gap-4 text-sm">
          <span class="font-medium text-blue-600">
            ${filtered} diamants sur ${total} (${percentage}%)
          </span>
          <span class="text-gray-500">
            Prix moyen: $${avgPrice.toLocaleString()}
          </span>
          <span class="text-gray-500">
            Poids moyen: ${avgCarat} carats
          </span>
        </div>
      `;
    }
  }

  function renderPlot() {
    const filters = getFilters();
    const div = document.querySelector("#myplot");
    
    if (div) {
      div.innerHTML = "";
    }
    
    const filteredData = filterDiamonds(diamonds, filters);
    updateChartInfo(filteredData);
    
    if (filteredData.length === 0) {
      if (div) {
        div.innerHTML = `
          <div class="chart-placeholder">
            <div class="text-center">
              <div class="text-4xl mb-4">üíé</div>
              <p class="text-gray-500">Aucun diamant ne correspond aux filtres</p>
              <p class="text-sm text-gray-400 mt-2">Essayez de modifier vos crit√®res de qualit√©</p>
            </div>
          </div>
        `;
      }
      return;
    }
    
    const plot = Plot.plot({
      title: "Relation entre le prix et le poids des diamants",
      subtitle: `${filteredData.length} diamants analys√©s`,
      width: 800,
      height: 500,
      marginLeft: 70,
      marginBottom: 50,
      grid: true,
      color: {
        legend: true,
        domain: ["Fair", "Good", "Very Good", "Premium", "Ideal"],
        range: ["#ef4444", "#f97316", "#eab308", "#22c55e", "#3b82f6"]
      },
      marks: [
        Plot.dot(filteredData, {
          x: "carat",
          y: "price",
          fill: "cut",
          r: 3,
          opacity: 0.7,
          tip: true
        }),
        Plot.linearRegressionY(filteredData, {
          x: "carat",
          y: "price",
          stroke: "red",
          strokeWidth: 2,
          strokeOpacity: 0.8
        })
      ]
    });
    
    div?.append(plot);
  }

  selectCut?.addEventListener("change", renderPlot);
  selectColor?.addEventListener("change", renderPlot);
  selectClarity?.addEventListener("change", renderPlot);

  renderPlot();
</script>

<style>
  .filter-group {
    @apply flex flex-col space-y-2;
  }
  
  .filter-label {
    @apply text-sm font-medium text-gray-700;
  }
  
  .filter-select {
    @apply block w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm 
           focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500
           bg-white transition-all duration-200 hover:border-gray-400;
  }
  
  .filter-select:focus {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.15);
  }

  .chart-container {
    min-height: 500px;
    background: white;
    border-radius: 12px;
    padding: 20px;
    border: 1px solid #e5e7eb;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .chart-placeholder {
    @apply flex items-center justify-center h-96 bg-gradient-to-br from-gray-100 to-gray-200 rounded-lg border-2 border-dashed border-gray-300;
  }

  .chart-loading {
    @apply text-gray-500 text-center;
  }

  .loading-spinner {
    @apply animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4;
  }
</style>
</Layout>